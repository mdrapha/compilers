#include <stdio.h>
#include <stdlib.h>
#include "funcs.h"

int main(int argc, char *argv[]) {

    const char *filename;
    int buffer_size;

    filename = = argv[1];
    buffer_size = atoi(argv[2])

    if (argc != 3) {
        fprintf(stderr, "Erro: Número incorreto de argumentos.\n");
        fprintf(stderr, "Uso: %s <nome_do_arquivo> <tamanho_do_buffer>\n", argv[0]);
        return 1;
    }

    if (fopen(filename, "r") == NULL) {
        fprintf(stderr, "Erro: Não foi possível abrir o arquivo.\n");
        return 1;
    }


    struct Buffer buffer = allocate_buffer(buffer_size);

    replace_print(&buffer, filename);

    deallocate_buffer(&buffer);

    return 0;


}

gcc -o programa main.c funcs.c

./programa file.txt 100

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "funcs.h"

// Função para alocar o buffer
struct Buffer allocate_buffer(int size) {
    struct Buffer buffer;
    buffer.size = size;
    buffer.data = (char *)malloc(size * sizeof(char));
    if (buffer.data == NULL) {
        fprintf(stderr, "Erro: Não foi possível alocar o buffer.\n");
        exit(1);
    }
    return buffer;
}

// Função para desalocar o buffer
void deallocate_buffer(struct Buffer *buffer) {
    free(buffer->data);
    buffer->data = NULL;
    buffer->size = 0;
}

// Função para substituir e imprimir o buffer
void replace_print(struct Buffer *buffer, const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        fprintf(stderr, "Erro: Não foi possível abrir o arquivo.\n");
        exit(1);
    }

    int i = 0;
    int c;

    while ((c = fgetc(file)) != EOF) {
        if (i < buffer->size) {
            if (islower(c)) {
                buffer->data[i] = toupper(c);
            } else if (isupper(c)) {
                buffer->data[i] = tolower(c);
            } else {
                buffer->data[i] = c;
            }
            i++;
        } else {
            // Buffer cheio, imprimir e reiniciar
            buffer->data[i] = '\0';
            printf("%s", buffer->data);
            i = 0;
        }
    }

    if (i > 0) {
        buffer->data[i] = '\0';
        printf("%s", buffer->data);
    }

    fclose(file);
}

